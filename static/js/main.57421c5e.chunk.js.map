{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","console","log","this","props","poster","title","Component","MoviePoster","src","alt","width","movies","App","className","map","movie","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAIMA,G,6LAOE,OADAC,QAAQC,IAAIC,KAAKC,OAEb,6BACI,kBAAC,EAAD,CAAaC,OAAQF,KAAKC,MAAMC,SAChC,4BAAKF,KAAKC,MAAME,Y,GAVZC,cAgBdC,E,iLAKE,OACI,yBAAKC,IAAKN,KAAKC,MAAMC,OAAQK,IAAI,GAAGC,MAAM,Y,GAN5BJ,aAWXP,IC3BTY,EAAS,CACb,CACEN,MAAO,eACPD,OAAQ,mEAEV,CACEC,MAAO,OACPD,OAAQ,mHAEV,CACEC,MAAO,YACPD,OAAQ,wJAEV,CACEC,MAAO,aACPD,OAAQ,yHAgBGQ,E,iLAVX,OACE,yBAAKC,UAAU,OACZF,EAAOG,IAAI,SAACC,EAAOC,GAClB,OAAO,kBAAC,EAAD,CAAOX,MAAOU,EAAMV,MAAOD,OAAQW,EAAMX,OAAQa,IAAKD,W,GALrDV,aCXEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.57421c5e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Movie.css';\nimport propTypes from 'prop-types';\n\nclass Movie extends Component{\n    static propTypes = {\n        title: propTypes.string.isRequired,\n        poster: propTypes.string.isRequired\n    }\n    render(){\n        console.log(this.props);\n        return(\n            <div>\n                <MoviePoster poster={this.props.poster}/>\n                <h1>{this.props.title}</h1>\n            </div>\n        )\n    }\n}\n\nclass MoviePoster extends Component{\n    static propTypes = {\n        poster : propTypes.string.isRequired\n    }\n    render(){\n        return(\n            <img src={this.props.poster} alt=\"\" width=\"300\"/>\n        )\n    }\n}\n\nexport default Movie //다른 js파일에서 movie 컴포넌트를 사용할 수 있도록 export\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie.js';\n\nconst movies = [\n  {\n    title: 'Harry Potter',\n    poster: 'https://timedotcom.files.wordpress.com/2014/07/301386_full1.jpg'\n  },\n  {\n    title: 'Bugs',\n    poster: 'https://lumiere-a.akamaihd.net/v1/images/open-uri20150422-12561-rjh0mf_17e758bd.jpeg?region=0%2C0%2C1000%2C1409'\n  },\n  {\n    title: 'Toy Story',\n    poster: 'https://images2.minutemediacdn.com/image/upload/c_fill,g_auto,h_1248,w_2220/f_auto,q_auto,w_1100/v1555429044/shape/mentalfloss/toy_story_primary.png'\n  },\n  {\n    title: 'About Time',\n    poster: 'https://m.media-amazon.com/images/M/MV5BMTA1ODUzMDA3NzFeQTJeQWpwZ15BbWU3MDgxMTYxNTk@._V1_UX182_CR0,0,182,268_AL_.jpg'\n  },\n]\n\nclass App extends Component{ //component -> return -> render\n  render(){\n    return(\n      <div className=\"App\">\n        {movies.map((movie, index)=>{\n          return <Movie title={movie.title} poster={movie.poster} key={index} />\n        })}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}